#!/bin/bash

# Pre-commit hook for waybar-ai with auto-fix capabilities
# This hook automatically fixes formatting issues and enforces code quality

set -e

echo "üîç Running pre-commit checks with auto-fix..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if clang-format is available
if ! command -v clang-format &> /dev/null; then
    echo -e "${RED}‚ùå clang-format not found. Please install clang-format to continue.${NC}"
    echo "   On Arch: sudo pacman -S clang-tools"
    echo "   On Ubuntu: sudo apt install clang-format"
    echo "   On macOS: brew install clang-format"
    exit 1
fi

# Get list of staged C++ files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|hpp|h|c)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No C++ files to check.${NC}"
    exit 0
fi

echo "üìù Checking C++ files: $STAGED_FILES"

# Auto-fix clang-format issues
echo "üé® Auto-fixing clang-format issues..."
FIXED_FILES=()

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check if file needs formatting
        if ! clang-format --style=file --dry-run --Werror "$file" >/dev/null 2>&1; then
            echo -e "${BLUE}üîß Auto-fixing formatting for $file${NC}"
            clang-format --style=file -i "$file"
            FIXED_FILES+=("$file")
        fi
    fi
done

# Re-stage fixed files
if [ ${#FIXED_FILES[@]} -gt 0 ]; then
    echo -e "${YELLOW}üìù Re-staging auto-fixed files...${NC}"
    git add "${FIXED_FILES[@]}"
    echo -e "${GREEN}‚úÖ Auto-fixed and re-staged: ${FIXED_FILES[*]}${NC}"
fi

# Check for common C++ issues
echo "üîç Running basic C++ checks..."

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check for TODO/FIXME comments (warn only)
        if grep -n "TODO\|FIXME" "$file" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  $file contains TODO/FIXME comments${NC}"
        fi
        
        # Check for debug prints (warn only)
        if grep -n "std::cout\|printf\|cout" "$file" >/dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è  $file may contain debug prints${NC}"
        fi
        
        # Check for missing includes (basic check)
        if grep -q "std::" "$file" && ! grep -q "#include <iostream>" "$file" && ! grep -q "#include <cstdio>" "$file"; then
            if grep -q "std::cout\|std::cerr\|std::endl" "$file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  $file uses std::cout but may be missing #include <iostream>${NC}"
            fi
        fi
    fi
done

# Check for large files (warn if > 1000 lines)
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        LINES=$(wc -l < "$file")
        if [ $LINES -gt 1000 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  $file is large ($LINES lines) - consider splitting${NC}"
        fi
    fi
done

echo -e "${GREEN}‚úÖ All pre-commit checks completed!${NC}"
exit 0
